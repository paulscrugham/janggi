# Author: Paul Scrugham
# Date: 1/13/2020
# Description: Tests JanggiGame

from JanggiGame import *
import unittest


class JanggiGameTests(unittest.TestCase):
    def test_soldier(self):
        game = JanggiGame()
        game.make_move('a7', 'a6')
        game.make_move('i4', 'i5')
        game.make_move('a6', 'a5')
        game.make_move('i5', 'i6')
        game.make_move('a5', 'a4')
        final_move = game.make_move('i6', 'i7')
        self.assertEqual(final_move, True)

    def test_cannon_1(self):
        """Tests if a blue cannon will jump over another cannon"""
        game = JanggiGame()
        game.make_move('a7', 'b7')
        game.make_move('i4', 'i5')
        final_move = game.make_move('b8', 'b2')
        self.assertEqual(final_move, False)

    def test_cannon_2(self):
        """Tests if a blue cannon will capture another cannon"""
        game = JanggiGame()
        game.make_move('a7', 'b7')
        game.make_move('i4', 'i5')
        final_move = game.make_move('b8', 'b3')
        self.assertEqual(final_move, False)

    def test_cannon_3(self):
        """Tests if a blue cannon will jump over an intervening piece"""
        game = JanggiGame()
        game.make_move('a7', 'b7')
        game.make_move('i4', 'i5')
        final_move = game.make_move('b8', 'b5')
        self.assertEqual(final_move, True)

    def test_cannon_4(self):
        """Tests if a red cannon will capture a blue soldier"""
        game = JanggiGame()
        game.make_move('a7', 'b7')  # blue
        game.make_move('a4', 'b4')  # red
        game.make_move('b7', 'b6')  # blue
        final_move = game.make_move('b3', 'b6')  # red cannon
        self.assertEqual(final_move, True)

    def test_chariot(self):
        """Tests if a blue chariot can move forward 1 space and right 3 spaces"""
        game = JanggiGame()
        game.make_move('a10', 'a9')
        game.make_move('a4', 'b4')
        final_move = game.make_move('a9', 'd9')
        self.assertEqual(final_move, True)

    def test_horse_1(self):
        """Tests if a blue horse will move forward and right"""
        game = JanggiGame()
        final_move = game.make_move('h10', 'i8')
        self.assertEqual(final_move, True)

    def test_horse_2(self):
        """Tests if a blue horse can "pass" a turn"""
        game = JanggiGame()
        final_move = game.make_move('c10', 'c10')
        self.assertEqual(final_move, True)

    def test_horse3(self):
        """Test if blue horse from East can capture a red soldier"""
        game = JanggiGame()
        game.make_move('c10', 'd8')
        game.make_move('c1', 'd3')
        game.make_move('e7', 'e6')
        game.make_move('e4', 'e5')
        game.make_move('c7', 'c6')
        game.make_move('c4', 'c5')
        game.make_move('c6', 'c5')
        game.make_move('e5', 'e6')
        game.make_move('d8', 'e6')
        game.make_move('d3', 'c5')
        game.make_move('h10', 'g8')
        game.make_move('h1', 'i3')
        game.make_move('g7', 'h7')
        game.make_move('g4', 'f4')
        game.make_move('h7', 'h6')
        game.make_move('i4', 'i5')
        game.make_move('h6', 'h5')
        game.make_move('i5', 'i6')
        game.make_move('g8', 'g8')
        game.make_move('i6', 'h6')
        final_move = game.make_move('g8', 'h6')
        self.assertEqual(final_move, True)

    def test_guard(self):
        """Test orthogonal move for Blue Guard"""
        game = JanggiGame()
        final_move = game.make_move('d10', 'd9')
        self.assertEqual(final_move, True)

    def test_moving_into_check(self):
        """Tests if make_move will return false for a move that places red's General in check"""
        game = JanggiGame()
        game.make_move('a7', 'a6')
        game.make_move('i4', 'i5')
        game.make_move('a6', 'a5')
        game.make_move('i5', 'i6')
        game.make_move('a10', 'a6')
        game.make_move('i1', 'i5')
        game.make_move('a6', 'd6')
        final_move = game.make_move('e2', 'd2')  # should return False since moving General here would put it in check
        self.assertEqual(final_move, False)

    def test_is_in_check_blue(self):
        game = JanggiGame()
        game.make_move('c7', 'c6')
        game.make_move('c1', 'd3')
        game.make_move('b10', 'd7')
        game.make_move('b3', 'e3')
        game.make_move('c10', 'd8')
        game.make_move('h1', 'g3')
        game.make_move('e7', 'e6')
        game.make_move('e3', 'e6')
        check_test = game.is_in_check('b')
        self.assertEqual(check_test, False)

    def test_checkmate_1(self):
        """Tests if the checkmate scenario is properly identified"""
        game = JanggiGame()
        game.make_move('c7', 'c6')
        game.make_move('c1', 'd3')
        game.make_move('b10', 'd7')
        game.make_move('b3', 'e3')
        game.make_move('c10', 'd8')
        game.make_move('h1', 'g3')
        game.make_move('e7', 'e6')
        game.make_move('e3', 'e6')
        game.make_move('h8', 'c8')
        game.make_move('d3', 'e5')
        game.make_move('c8', 'c4')
        game.make_move('e5', 'c4')
        game.make_move('i10', 'i8')
        game.make_move('g4', 'f4')
        game.make_move('i8', 'f8')
        game.make_move('g3', 'h5')
        game.make_move('h10', 'g8')
        game.make_move('e6', 'e3')
        game.make_move('e9', 'd9')
        game.make_move('a4', 'a5')
        game.make_move('a7', 'a6')
        game.make_move('a5', 'a6')
        game.make_move('c6', 'c5')
        game.make_move('a6', 'b6')
        game.make_move('c5', 'c4')
        game.make_move('a1', 'a9')
        check_test = game.is_in_checkmate('blue')
        self.assertEqual(check_test, False)

    def test_checkmate_2(self):
        """
        Tests if a move by blue returns false when the player is in check and the move does not take the
        player out of check
        """
        game = JanggiGame()
        game.make_move('c7', 'c6')
        game.make_move('c1', 'd3')
        game.make_move('b10', 'd7')
        game.make_move('b3', 'e3')
        game.make_move('c10', 'd8')
        game.make_move('h1', 'g3')
        game.make_move('e7', 'e6')
        game.make_move('e3', 'e6')
        game.make_move('h8', 'c8')
        game.make_move('d3', 'e5')
        game.make_move('c8', 'c4')
        game.make_move('e5', 'c4')
        game.make_move('i10', 'i8')
        game.make_move('g4', 'f4')
        game.make_move('i8', 'f8')
        game.make_move('g3', 'h5')
        game.make_move('h10', 'g8')
        game.make_move('e6', 'e3')
        game.make_move('e9', 'd9')
        game.make_move('a4', 'a5')
        game.make_move('a7', 'a6')
        game.make_move('a5', 'a6')
        game.make_move('c6', 'c5')
        game.make_move('a6', 'b6')
        game.make_move('c5', 'c4')
        game.make_move('a1', 'a9')
        final_move = game.make_move('d9', 'e9')
        self.assertEqual(final_move, False)

    def test_full_game_1(self):
        game = JanggiGame()
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('a7', 'b7'))
        print(game.make_move('i4', 'h4'))
        print(game.make_move('h10', 'g8'))
        print(game.make_move('c1', 'd3'))
        print(game.make_move('h8', 'e8'))
        print(game.make_move('i1', 'i2'))
        print(game.make_move('e7', 'f7'))
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('b3', 'e3'))
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('g10', 'e7'))
        print(game.make_move('e4', 'd4'))
        print(game.make_move('c10', 'd8'))
        print(game.make_move('g1', 'e4'))
        print(game.make_move('f10', 'f9'))
        print(game.make_move('h1', 'g3'))
        print(game.make_move('a10', 'a6'))
        print(game.make_move('d4', 'd5'))
        print(game.make_move('e9', 'f10'))
        print(game.make_move('h3', 'f3'))
        print(game.make_move('e8', 'h8'))
        print(game.make_move('i2', 'h2'))
        print(game.make_move('h8', 'f8'))
        print(game.make_move('f1', 'f2'))
        print(game.make_move('b8', 'e8'))
        print(game.make_move('f3', 'f1'))
        print(game.make_move('i7', 'h7'))
        print(game.make_move('f1', 'c1'))
        print(game.make_move('d10', 'e9'))
        print(game.make_move('a4', 'b4'))
        print(game.make_move('a6', 'a1'))
        print(game.make_move('c1', 'a1'))
        print(game.make_move('f8', 'd10'))
        print(game.make_move('d5', 'c5'))
        print(game.make_move('i10', 'i6'))
        print(game.make_move('b1', 'd4'))
        print(game.make_move('c7', 'c6'))
        print(game.make_move('c5', 'b5'))
        print(game.make_move('b10', 'd7'))
        print(game.make_move('d4', 'f7'))
        print(game.make_move('g7', 'f7'))
        print(game.make_move('a1', 'f1'))
        print(game.make_move('g8', 'f6'))
        print(game.make_move('f1', 'f5'))
        print(game.make_move('f6', 'd5'))
        print(game.make_move('e3', 'e5'))
        print(game.make_move('f7', 'f6'))
        print(game.make_move('f5', 'f7'))
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('f10', 'e10'))
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('e2', 'f1'))
        print(game.make_move('i6', 'i3'))
        print(game.make_move('h2', 'g2'))
        print(game.make_move('i3', 'i1'))
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('f1', 'e2'))
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('f6', 'f5'))
        print(game.make_move('c4', 'd4'))
        print(game.make_move('f5', 'e5'))
        print(game.make_move('f7', 'd7'))
        print(game.make_move('e7', 'g4'))
        print(game.make_move('d4', 'd5'))
        print(game.make_move('e5', 'e4'))
        print(game.make_move('d3', 'e5'))
        print(game.make_move('e4', 'e3'))
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('e2', 'd2'))
        print(game.make_move('e3', 'e2'))
        print(game.is_in_check('red'))
        print(game.is_in_check('blue'))
        print(game.make_move('d2', 'd3'))
        print(game.make_move('b7', 'b6'))
        print(game.make_move('f2', 'e2'))
        print(game.make_move('h7', 'h6'))
        print(game.make_move('b4', 'a4'))
        print(game.make_move('i1', 'd1'))
        print(game.make_move('e2', 'd2'))
        print(game.make_move('e8', 'e4'))
        print(game.make_move('a4', 'b4'))
        print(game.make_move('d1', 'f3'))
        win = game.get_game_state()
        self.assertEqual(win, 'BLUE_WON')

    def test_full_game_2(self):
        game = JanggiGame()
        game.make_move('e7', 'e6')
        game.make_move('e2', 'e2')
        game.make_move('e6', 'e5')
        game.make_move('e2', 'e2')
        game.make_move('e5', 'e4')
        game.make_move('e2', 'e2')
        game.make_move('e4', 'd4')
        game.make_move('e2', 'e2')
        game.make_move('d4', 'c4')
        game.make_move('e2', 'e2')
        game.make_move('a10', 'a9')
        game.make_move('e2', 'e2')
        game.make_move('a9', 'd9')
        game.make_move('e2', 'e2')
        game.make_move('d9', 'd8')
        game.make_move('e2', 'e2')
        game.make_move('d8', 'd7')
        game.make_move('e2', 'e2')
        game.make_move('d7', 'd6')
        game.make_move('i1', 'i2')
        game.make_move('e9', 'e9')
        game.make_move('i2', 'g2')
        game.make_move('e9', 'e9')
        game.make_move('i4', 'h4')
        game.make_move('e9', 'e9')
        game.make_move('h3', 'h5')
        game.make_move('i10', 'i9')
        game.make_move('e2', 'e2')
        game.make_move('i9', 'g9')
        game.make_move('e2', 'e2')
        game.make_move('g9', 'g8')
        game.make_move('e2', 'e2')
        game.make_move('h8', 'f8')
        game.make_move('f1', 'e1')
        game.make_move('g7', 'f7')
        game.make_move('e2', 'e2')
        game.make_move('i7', 'i6')
        game.make_move('e2', 'e2')
        game.make_move('g10', 'i7')
        game.make_move('e2', 'e2')
        game.make_move('i7', 'f5')
        game.make_move('e2', 'e2')
        game.make_move('f5', 'd8')
        game.make_move('e2', 'e2')
        game.make_move('d8', 'b5')
        game.make_move('e2', 'e2')
        game.make_move('c4', 'd4')
        game.make_move('e2', 'e2')
        game.make_move('d4', 'e4')
        game.make_move('e2', 'e2')
        game.make_move('e4', 'e3')
        win = game.get_game_state()
        self.assertEqual(win, 'BLUE_WON')


if __name__ == '__main__':
    unittest.main()
